using System;
using System.Collections.Generic;
using System.IO;
using System.Windows;

namespace DumpToolForYunJiang
{
    class M1CardConvert
    {
        private byte[] card_num;

        private byte[,,] final_card;

        private static byte[,,] init_card = new byte[,,]
        { 
            { 
                { 0x00,0x00,0x00,0x00,0x00,0x08,0x04,0x00,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF }
            },
            {
                //楼号 卡序号 门牌号
                { 0x06,0x21,0x07,0xD5,0x11,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x10,0x0A,0x1E,0x42,0x01,0x01,0x00,0x00,0x00,0x88,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0x30,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xCF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0x30,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xCF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x10,0x0B,0x06,0x11,0x08,0x0C,0x00,0x00,0x00,0x88,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0x30,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xCF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0x30,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xCF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF }
            },
            {
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
                { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x80,0x69,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF }
            }
        };

        public M1CardConvert(byte[] card_num)
        {
            this.card_num = card_num;
            final_card = Parse();
        }

        private byte[,,] Parse()
        {
            byte[,,] new_card = (byte[,,])init_card.Clone();
            for(int i = 0; i < 4; i++)
            {
                new_card[0, 0, i] = card_num[i];
                new_card[0, 0, 4] ^= card_num[i];
            }
            new_card[3, 3, 0] = new_card[4, 3, 0] = (byte)(new_card[0, 0, 0] ^ 0x0C);
            new_card[3, 3, 10] = new_card[4, 3, 10] = (byte)(0xFF - new_card[3, 3, 0]);
            new_card[5, 3, 0] = new_card[6, 3, 0] = (byte)(new_card[3, 3, 0] ^ 0x01);
            new_card[5, 3, 10] = new_card[6, 3, 10] = (byte)(0xFF - new_card[5, 3, 0]);

            new_card[3, 3, 1] = new_card[4, 3, 1] = (byte)(new_card[0, 0, 1] ^ 0x10);
            new_card[3, 3, 11] = new_card[4, 3, 11] = (byte)(0xFF - new_card[3, 3, 1]);
            new_card[5, 3, 1] = new_card[6, 3, 1] = (byte)(new_card[3, 3, 1] ^ 0x02);
            new_card[5, 3, 11] = new_card[6, 3, 11] = (byte)(0xFF - new_card[5, 3, 1]);

            new_card[3, 3, 2] = new_card[4, 3, 2] = (byte)(new_card[0, 0, 2] ^ 0xC9);
            new_card[3, 3, 12] = new_card[4, 3, 12] = (byte)(0xFF - new_card[3, 3, 2]);
            new_card[5, 3, 2] = new_card[6, 3, 2] = (byte)(new_card[3, 3, 2] ^ 0x03);
            new_card[5, 3, 12] = new_card[6, 3, 12] = (byte)(0xFF - new_card[5, 3, 2]);

            new_card[3, 3, 3] = new_card[4, 3, 3] = (byte)(new_card[0, 0, 3] ^ 0x62);
            new_card[3, 3, 13] = new_card[4, 3, 13] = (byte)(0xFF - new_card[3, 3, 3]);
            new_card[5, 3, 3] = new_card[6, 3, 3] = (byte)(new_card[3, 3, 3] ^ 0xAD);
            new_card[5, 3, 13] = new_card[6, 3, 13] = (byte)(0xFF - new_card[5, 3, 3]);

            //new_card[5, 3, 4] = new_card[6, 3, 4] = (byte)(new_card[3, 3, 4] ^ 0x00);

            new_card[3, 3, 5] = new_card[4, 3, 5] = (byte)(new_card[0, 0, 4] ^ 0x87);
            new_card[3, 3, 15] = new_card[4, 3, 15] = (byte)(0xFF - new_card[3, 3, 5]);
            new_card[5, 3, 5] = new_card[6, 3, 5] = (byte)(new_card[3, 3, 5] ^ 0xAD);
            new_card[5, 3, 15] = new_card[6, 3, 15] = (byte)(0xFF - new_card[5, 3, 5]);

            return new_card;
        }
        
        public ButtonResult.ConvertResult ConvertOutput(string path)
        {
            bool successFlag = true;
            FileStream fs = null;
            try
            {
                fs = new FileStream(path, FileMode.Create);
                List<byte> list = new List<byte>();
                foreach (byte i in final_card)
                {
                    list.Add(i);
                }
                byte[] data = list.ToArray();
                fs.Write(data, 0, data.Length);
            }
            catch (Exception ex)
            {
                MessageBox.Show("A handled exception just occurred: " + ex.Message, "Exception Sample", MessageBoxButton.OK, MessageBoxImage.Error);
                successFlag = false;
            }
            finally
            {
                if(fs != null)
                {
                    fs.Flush();
                    fs.Close();
                }
            }
            return successFlag?ButtonResult.ConvertResult.Success:ButtonResult.ConvertResult.FailNoReason;
        }
    }
}
